#version 450
#extension GL_ARB_separate_shader_objects : enable

#extension GL_GOOGLE_include_directive :enable

#include "constants.h"

struct Vertex {
    vec4 position;
	vec4 velocity;
	vec4 attr1;  // radius, mass, isFixed, snowPortion
	vec4 attr2;  // neighborMax, hasBrokenBond, d, (null)
	vec4 color;
};

layout(set = 0, binding = 0) buffer VerticesA {
	Vertex verticesA[];
};

layout(set = 0, binding = 1) buffer VerticesB {
	Vertex verticesB[];
};

layout(set = 0, binding = 2) buffer CellVertArray {
	int cellVertArray[];  
};

layout(set = 0, binding = 3) buffer CellVertCount {
	int cellVertCount[];   
};

layout(set = 0, binding = 4) buffer UniformNumVerts {
	int num_vertices;   
};

// Compute cohesive forces, compressive forces, update radius, move particles
void main() {
	const int PARTICLE_COUNT = num_vertices;
	uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= PARTICLE_COUNT)
		return;

	Vertex p = verticesA[index];
	vec3 pos = p.position.xyz;

	// find neighbors
	vec3 pos_temp;
	int neighborCount = 0;
	int neighborIdx[40];
	for(int i = 0; i < 40; ++i)
		neighborIdx[i] = -1;

	int indexX = int(floor(pos.x / gridSize));
	int indexY = int(floor(pos.y / gridSize));
	int indexZ = int(floor(pos.z / gridSize));
	int cellId = indexX + indexY * 100 + indexZ * 100 * 100;

	vec3 cohesiveForces = vec3(0.f, 0.f, 0.f);
	vec3 positiveForces = vec3(0.f, 0.f, 0.f);
	vec3 negitiveForces = vec3(0.f, 0.f, 0.f);
	float compressiveForces = 0.f;

}
#version 450
#extension GL_ARB_separate_shader_objects : enable

#extension GL_GOOGLE_include_directive :enable

#include "constants.h"

struct Vertex {
    vec4 position;
	vec4 velocity;
	vec4 attr1;  // radius, mass, isFixed, snowPortion
	vec4 attr2;  // neighborMax, hasBrokenBond, d, (null)
	vec4 color;
};

layout(set = 0, binding = 0) buffer VerticesA {
	Vertex verticesA[];
};

layout(set = 0, binding = 1) buffer VerticesB {
	Vertex verticesB[];
};

layout(set = 0, binding = 2) buffer CellVertArray {
	int cellVertArray[];  
};

layout(set = 0, binding = 3) buffer CellVertCount {
	int cellVertCount[];   
};

layout(set = 0, binding = 4) buffer UniformNumVerts {
	int num_vertices;   
};

// Compute cohesive forces, compressive forces, update radius, move particles
void main() {
	const int PARTICLE_COUNT = num_vertices;
	uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= PARTICLE_COUNT)
		return;
	float dt = 0.0002;
	Vertex p = verticesA[index];
	vec3 pos = p.position.xyz;
	pos += vec3(verticesA[index].attr1.x * dt, 0.f, 0.f);
	verticesB[index].position.xyz = pos;

}
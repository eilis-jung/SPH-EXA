#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive :enable

#include "constants.h"
#define ALL_POINTS 36

struct Vertex {
    vec4 position;
	vec4 velocity;
	vec4 attr1;  // radius, mass, isFixed, snowPortion
	vec4 attr2;  // neighborMax, hasBrokenBond, d, (null)
	vec4 color;
};

layout(set = 0, binding = 0) buffer VerticesA {
	Vertex verticesA[];
};

layout(set = 0, binding = 1) buffer VerticesB {
	Vertex verticesB[];
};

layout(set = 0, binding = 4) buffer UniformNumVerts {
	int num_vertices;   
};

layout(set = 0, binding = 5) buffer AllVerts {
	Vertex allVerts[];   
};

// Compute all vertices position
void main() {
	const int PARTICLE_COUNT = num_vertices * ALL_POINTS;
	uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT)
		return;
	
	int vertexId = int(index) / ALL_POINTS;
	vec3 deltaPos = verticesB[vertexId].position.xyz - verticesA[vertexId].position.xyz;
	// deltaPos = vec3(0.0002f, 0.f, 0.f);
	allVerts[index].position.xyz += deltaPos;
	//allVerts[0].position.xyz = verticesB[0].position.xyz;
}